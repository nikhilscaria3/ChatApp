<!DOCTYPE html>
<html>

<head>
  <title>Chat</title>
</head>

<body>
  <style>
    body {
      font-family: Arial, sans-serif;
    }

    .container {
      max-width: 600px;
      margin: 0 auto;
      padding: 20px;
      box-sizing: border-box;
    }

    .message {
      background-color: #f2f2f2;
      padding: 10px;
      margin-bottom: 10px;
    }

    .message p {
      margin: 0;
    }

    .message p strong {
      font-weight: bold;
    }

    form {
      margin-top: 20px;
    }

    input[type="text"] {
      padding: 10px;
      width: 100%;
      box-sizing: border-box;
      margin-bottom: 10px;
    }

    button[type="submit"] {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: #fff;
      border: none;
      cursor: pointer;
    }

    button[type="submit"]:hover {
      background-color: #45a049;
    }
  </style>

  <body>
    <div class="container">
      <h1>Admin Chat</h1>
     <div id="messages">
  {{#each messages}}
  <div class="message">
    <p><strong>Sender:</strong> {{this.sender}}</p>
    <p><strong>Content:</strong> {{this.content}}</p>
    <p><strong>Timestamp:</strong> {{ this.createdAt}}</p>
  </div>
  {{/each}}
</div>

      <form id="message-form" action="">
        <input id="sender" type="hidden" value="admin">
        <input id="receiver" type="text" value="{{userId}}">
        <input id="receiverid" type="hidden" value="{{adminId}}">
        <input id="content" type="text" placeholder="Type your message">
        <button type="submit">Send</button>
      </form>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();

      // Send a chat message
      const messageForm = document.getElementById('message-form');
      const contentInput = document.getElementById('content');
      const senderInput = document.getElementById('sender').value;
      const receiverInputid = document.getElementById('receiverid').value;

      messageForm.addEventListener('submit', (e) => {
        e.preventDefault();

        const content = contentInput.value.trim();
        const receiverInput = document.getElementById('receiver').value; // Get the current receiver input value
        if (content && receiverInput) {
          const message = {
            sender: senderInput,
            content: content,
            receiver: receiverInput,
            senderid: receiverInputid // Use the current receiver input value
          };

          socket.emit('chat message', message);
          contentInput.value = '';
        }
      });

      // Receive a chat message
      socket.on('chat message', (message) => {
        const messagesDiv = document.getElementById('messages');
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message');
        messageDiv.innerHTML = `
        <p><strong>Sender:</strong> ${message.sender}</p>
        <p><strong>Content:</strong> ${message.content}</p>
      `;
        messagesDiv.appendChild(messageDiv);
      });

      // Fetch previous messages on page load
      window.addEventListener('load', () => {
        const sender1 = "{{user._id}}";
        fetch(`/chat/${sender1}`) // Adjust the route to match your server-side route
          .then((response) => response.json())
          .then((data) => {
            data.messages.forEach((message) => {
              const messagesDiv = document.getElementById('messages');
              const messageDiv = document.createElement('div');
              messageDiv.classList.add('message');
              messageDiv.innerHTML = `
              <p><strong>Sender:</strong> ${message.sender}</p>
              <p><strong>Content:</strong> ${message.content}</p>
            `;
              messagesDiv.appendChild(messageDiv);
            });
          })
          .catch((error) => {
            console.error('Error fetching previous messages:', error);
          });
      });

      // Update messages in real-time when a new message is received
      socket.on('new message', (message) => {
        const messagesDiv = document.getElementById('messages');
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message');
        messageDiv.innerHTML = `
        <p><strong>Sender:</strong> ${message.sender}</p>
        <p><strong>Content:</strong> ${message.content}</p>
      `;
        messagesDiv.appendChild(messageDiv);
      });
    </script>
  </body>

</html>